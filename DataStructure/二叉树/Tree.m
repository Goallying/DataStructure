//
//  Tree.m
//  DataStructure
//
//  Created by 朱来飞 on 2018/4/22.
//  Copyright © 2018年 朱来飞. All rights reserved.
//

#import "Tree.h"

@implementation Tree

//概念------

//1节点的度
//一个节点直接含有的子树个数，叫做节点的度。比如上图中的 3 的度是 2，10 的度是 1。

//2树的度
//一棵树中 最大节点的度，即哪个节点的子节点最多，它的度就是 树的度。上图中树的度为 2

//3节点的层次
//从根节点开始算起，根节点算第一层，往后底层。比如上图中，3 的层次是 2，4 的层次是 4。

//4树的高度
//树的高度是从叶子节点开始，自底向上增加。

//5.树的深度
//与高度相反，树的深度从根节点开始，自顶向下增加。
//整个树的高度、深度是一样的，但是中间节点的高度 和 深度是不同的，比如上图中的 6 ，高度是 2 ，深度是 3。

//6.满二叉树
//一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为K，且结点总数是(2^k) -1 ，则它就是满二叉树。

//7.完全二叉树
//若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树
//除了最后一层之外的其他每一层都被完全填充，并且所有结点都保持向左对齐。

//8.完满二叉树
//除了叶子结点之外的每一个结点都有两个孩子结点。

//10
//- 完美(Perfect)二叉树一定是完全(Complete)二叉树，但完全(Complete)二叉树不一定是完美(Perfect)二叉树。
//- 完美(Perfect)二叉树一定是完满(Full)二叉树，但完满(Full)二叉树不一定是完美(Perfect)二叉树。
//- 完全(Complete)二叉树可能是完满(Full)二叉树，完满(Full)二叉树也可能是完全(Complete)二叉树。
//- 既是完全(Complete)二叉树又是完满(Full)二叉树也不一定就是完美(Perfect)二叉树。


//11.二叉排序树 （自实现）
//二叉查找树定义：又称为是二叉排序树（Binary Sort Tree）或二叉搜索树。二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：
//1) 若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
//2) 若它的右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；
//3) 它的左、右子树也分别为二叉排序树。

//12、平衡二叉树 （自实现）
//平衡二叉树（Balanced Binary Tree）又被称为AVL树。它或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。（注：平衡二叉树应该是一棵二叉排序树）

//13.B树(B-tree) https://zhuanlan.zhihu.com/p/27700617  https://www.jianshu.com/p/c33c3f9fc422
//https://www.cnblogs.com/vincently/p/4526560.html（动画）
//注意:之前有看到有很多文章把B树和B-tree理解成了两种不同类别的树，其实这两个是同一种树;
//概念：B树和平衡二叉树稍有不同的是B树属于多叉树又名平衡多路查找树（查找路径不只两个）
//（1）树种的每个节点最多拥有m个子节点且m>=2,空树除外（注：m阶代表一个树节点最多有多少个查找路径，m阶=m路,当m=2则是2叉树,m=3则是3叉）；
//（2）除根节点外每个节点的关键字数量大于等于ceil(m/2)-1个小于等于m-1个，非根节点关键字数必须>=2;（注：ceil()是个朝正无穷方向取整的函数 如ceil(1.1)结果为2)------每个节点有M-1个子节点
//（3）所有叶子节点均在同一层、叶子节点除了包含了关键字和关键字记录的指针外也有指向其子节点的指针只不过其指针地址都为null对应下图最后一层节点的空格子
//（4）如果一个非叶节点有N个子节点，则该节点的关键字数等于N-1;
//（5）所有节点关键字是按递增次序排列，并遵循左小右大原则；

//B树插入
//1. 按照B-树的查找方法找到插入位置（一定在叶节点上），然后直接插入。
//2. 插入后检查被插入结点内关键字的个数：
//1）如果关键字个数大于m-1，则需要进行拆分。进行拆分时，结点内的关键字若已经有m个，此时取出第 m/2 (向上取整) 个关键字
//2）并将第 1~(m/2) -1个关键字和第(m/2)+1~m个关键字（即第m/2关键字的左右不分）做成两个结点连接在第 m/2 个关键字左右的指针上
//3）并将第m/2个关键字插入其父节点相应的位置中
//4）如果在其父结点内又出现了关键字个数超出规定范围的情况，则继续进行拆分操作。（这就是插入结点所引起的连锁反应）
//特点：插入操作只会是的B-树逐渐变高而不会改变叶子结点在同一层的特性。


//B+ 树
//B+树是应文件系统所需而出的一种B树的变型树。一棵m阶的B+树和m阶的B-树的差异在于：
//1.有n棵子树的结点中含有n个关键字，每个关键字不保存数据，只用来索引，所有数据都保存在叶子节点。
//2.所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。
//3.所有的非终端结点可以看成是索引部分，结点中仅含其子树（根结点）中的最大（或最小）关键字。
//通常在B+树上有两个头指针，一个指向根结点，一个指向关键字最小的叶子结点。


//13 n2,n1,n0分别表示二叉树中度为2,1,0,的叶子节点数目.
//假设二叉树的总节点数为n.
//因为是二叉树,最大的度为2,所以n=n2+n1+n0
//而根据树中 总度数+1=总节点数
//得到 2*n2+1*n1+0*n0+1=n
//化简得2*n2+n1+1=n
//联合 n2+n1+n0=n
//不难得到n0=n2+1.

//14.前序遍历和中序遍历.

@end
